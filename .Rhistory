x<- matrix(c(4,3,3,2),2,2)
View(x)
x_inverse<-matrix (c(-2,3,3,-4),2,2)
x*x_inverse
x**x_inverse
x_inverse
x %*% x_inverse
?solve()
solve(x,x_inverse)
identity_2x2 # identity matrix
identity_2x2<-matrix(c(1,0,0,1),2,2) # identity matrix
solve(x,identity_2x2)
solve(x) # documentation: "solves the equation a %*% x = b for x,
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(4)
makeVector(c(4:1,1:4))
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
vec<-c(4:1,1:4)
cachemean(vec)
vec
vec<-c(1:8)
vec<-(1:8)
cachemean(vec)
makeVector(vec)
cachemean(vec)
vec<-(matrix(1:8,1,8))
makeVector(vec)
cachemean(vec)
vec<-(matrix(1:8,2,4))
makeVector(vec)
cachemean(vec)
vec<-(data.frame(1:8,2,4))
vec
makeVector(vec)
cachemean(vec)
cachemean(vec)
vec<-as.numeric(1:100, ...)
vec<-as.numeric(1:100)
makeVector(vec)
cachemean(vec)
vec<-as.numeric(1:100)
makeVector(vec)
cachemean(vec)
vec<-data.frame(1:100)
cachemean(vec)
makeVector(vec)
makeVector(vec)
cachemean(vec)
makeVector <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(solve) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(x)
makeVector(x)
cachemean(x)
makeVector(x)
makeVector <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(solve) m <<- inverse
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- inverse(data, ...)
x$setmean(m)
m
}
cachemean(x)
makeVector <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(solve) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(x)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- inverse(data, ...)
x$setmean(m)
m
}
cachemean(x)
a<-makeVector(vec)
cachemean(vec,a)
cachemean(a)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
a<-makeVector(vec)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(a)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(a)
vec<-c(1:100)
cachemean(a)
a<-makeVector(vec)
cachemean(a)
vec<-c(1:400)
cachemean(a)
cachemean(a)
## Write a short comment describing this function
cachemean(a)
a<-makeVector(vec)
cachemean(a)
cachemean((makeVector(vec)))
bd<-cachemean((makeVector(vec)))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(solve) m <<- inverse
getmean <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- inverse(data, ...)
x$setinverse(m)
m
}
cacheSolve(cachemean(x))
cacheSolve(makeCacheMatrix(x))
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(makeCacheMatrix(x))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(makeCacheMatrix(x))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(makeCacheMatrix(x))
